{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import tensorflow.examples.tutorials.mnist.input_data as input_data\n",
    "from .dataset_utils import *\n",
    "\n",
    "\n",
    "def MNIST(one_hot=True, split=[1.0, 0.0, 0.0]):\n",
    "    \"\"\"Returns the MNIST dataset.\n",
    "    Returns\n",
    "    -------\n",
    "    mnist : DataSet\n",
    "        DataSet object w/ convenienve props for accessing\n",
    "        train/validation/test sets and batches.\n",
    "    \"\"\"\n",
    "    ds = input_data.read_data_sets('MNIST_data/', one_hot=one_hot)\n",
    "    return Dataset(np.r_[ds.train.images,\n",
    "                         ds.validation.images,\n",
    "                         ds.test.images],\n",
    "                   np.r_[ds.train.labels,\n",
    "                         ds.validation.labels,\n",
    "                         ds.test.labels],\n",
    "                   split=split)\n",
    "\n",
    "\n",
    "def CIFAR10(flatten=True, split=[1.0, 0.0, 0.0]):\n",
    "    \"\"\"Returns the CIFAR10 dataset.\n",
    "    Parameters\n",
    "    ----------\n",
    "    flatten : bool, optional\n",
    "        Convert the 3 x 32 x 32 pixels to a single vector\n",
    "    Returns\n",
    "    -------\n",
    "    cifar : Dataset\n",
    "        Description\n",
    "    \"\"\"\n",
    "    # plt.imshow(np.transpose(np.reshape(\n",
    "    #   cifar.train.images[10], (3, 32, 32)), [1, 2, 0]))\n",
    "    Xs, ys = cifar10_load()\n",
    "    if flatten:\n",
    "        Xs = Xs.reshape((Xs.shape[0], -1))\n",
    "    return Dataset(Xs, ys, split=split)\n",
    "\n",
    "\n",
    "def CELEB(path='./img_align_celeba/'):\n",
    "    \"\"\"Attempt to load the files of the CELEB dataset.\n",
    "    Requires the files already be downloaded and placed in the `dst` directory.\n",
    "    http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html\n",
    "    Parameters\n",
    "    ----------\n",
    "    path : str, optional\n",
    "        Directory where the aligned/cropped celeb dataset can be found.\n",
    "    Returns\n",
    "    -------\n",
    "    files : list\n",
    "        List of file paths to the dataset.\n",
    "    \"\"\"\n",
    "    if not os.path.exists(path):\n",
    "        print('Could not find celeb dataset under {}.'.format(path))\n",
    "        print('Try downloading the dataset from the \"Aligned and Cropped\" ' +\n",
    "              'link located here (imgs/img_align_celeba.zip [1.34 GB]): ' +\n",
    "              'http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html')\n",
    "        return None\n",
    "    else:\n",
    "        fs = [os.path.join(path, f)\n",
    "              for f in os.listdir(path) if f.endswith('.jpg')]\n",
    "        if len(fs) < 202598:\n",
    "            print('It does not look like you have downloaded the entire ' +\n",
    "                  'Celeb Dataset.\\n' +\n",
    "                  'Try downloading the dataset from the \"Aligned and Cropped\" ' +\n",
    "                  'link located here (imgs/img_align_celeba.zip [1.34 GB]): ' +\n",
    "                  'http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html')\n",
    "        return fs"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
